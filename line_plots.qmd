---
title: "line_plots"
format: html
editor: visual
---

### Import libraries

```{r}
library(tidyverse)
library(here)
library(purrr)
library(ggprism)

```

### Read in files, use a for loop to assign csv files to their named dataframes

```{r}

#setwd("csv_files") 
fs <- list.files()

amino_acids <- str_remove(fs, ".csv") 
#read in all csv files in csv_files folder
dfs <- lapply(fs, read_csv) 

## assign .csv filenames to their corresponding dataframe
names(dfs) <- amino_acids; list2env(dfs, envir = .GlobalEnv) 

```

### Clean data - remove unneeded columns

```{r}
 ##
## This block of code applies a function using lapply across our list of lists. 

## We first pull out the columns in the select_if statement that match values in the columns we're interested in. We then select the columns by index, rename them to more pertinent names using rename().

## Next, we use an if_else statement to make a new column of rows to keep if they don't have NA values. The if_else statement returns true only when affinity and ph have populated rows. We then filter across the entire dataframe to remove any remaining rows containing strings.

##We filter to where our keep column is true, and then slice out the first row since it contained strings. This may not be completely reproducible to the shallow rock data, but the data was very poorly formatted here and options were limited.

## We then mutate across everything to turn our dataframe of characters into numerical doubles, and then select our columns of interest
cleaned <- lapply(dfs, function(x) x |> select_if(~ any(.x == c("Affinity (tot)", "pH", "Temperature"))) |> 
                    select(1,3,4) |> 
                    rename(temp = 1, affinity = 2, ph = 3) |> 
                    mutate(keep = if_else((is.na(affinity) & is.na(ph)), FALSE, TRUE)) |> 
                    filter(across(everything(), 
                                  ~ !str_detect(.,c('Affinity (tot)', 'Temperature', 'pH'))))|>
                    filter(keep == TRUE) |> 
                    slice(2:85) |> 
                    mutate(across(where(is.character), as.double)) |> 
                    select(temp, affinity, ph))

## Saving the names back to their variable assignments
names(cleaned) <- amino_acids; list2env(cleaned, envir = .GlobalEnv) 

```

```{r}
# Slice through cleaned by index to get our 4 different conditions as a list of dataframes

c <- 1:42
c[1:21] = TRUE
c[22:42] = FALSE
c = as.factor(c)

deep_8 <- lapply(cleaned, function(x) x |> 
                   slice(1:42) |> 
                   mutate(cond = c) |> 
                   pivot_wider(id_cols = temp, 
                               names_from = cond, 
                               values_from = c(affinity, ph), 
                               id_expand = TRUE) |> 
                   unnest(cols = c(affinity_1, affinity_0, ph_1, ph_0)))
                   
deep_11 <- lapply(cleaned, function(x) x |> 
                    slice(43:84) |> 
                    mutate(cond = c) |> 
                    pivot_wider(id_cols = temp, 
                                names_from = cond, 
                                values_from = c(affinity, ph), 
                                id_expand = TRUE) |> 
                    unnest(cols = c(affinity_1, affinity_0, ph_1, ph_0)))
                            

```

```{r}
for (i in seq_along(deep_11)) {
  p = ggplot(deep_11[[i]]) + 
  geom_line(aes(x = ph_1, y = affinity_1), alpha = 0) + 
  geom_line(aes(x = ph_0, y = affinity_0), alpha = 0) + 
  geom_ribbon(aes(x = ph_1, 
                  ymin = affinity_1,
                  ymax = affinity_0), 
              fill = 'deepskyblue') +
  scale_x_continuous(limits = c(7, 13), 
                     guide = guide_prism_minor()) +
  scale_y_continuous(limits = c(-90, 60),
                     breaks = seq(-80, 60, by = 20),
                     guide = guide_prism_minor()) + 
  labs(x = 'pH', y = 'Affinity (J/mole)') + 
  geom_hline(yintercept = 0, linetype=2, alpha = 0.75) + 
  geom_vline(xintercept = 8.5, linetype = 'dotted', alpha = 0.5) + 
  geom_vline(xintercept = 11, linetype = 'dotted', alpha = 0.5) + 
  geom_segment(y = 50, 
               yend = 50, 
               linetype = 1, 
               x = 8.5, 
               xend = 11,
               arrow = arrow(ends = 'both', 
                             length = unit(0.25, 'cm'))) + 
  annotate('text', x = 9.75, y = 55, label = 'Enceladus ocean water') +
  theme_classic() +
    ggtitle(print(paste0(names(deep_11)[[i]], ' pH = 11'))) 
  ggsave(here(path = 'figs', print(paste0(names(deep_11)[[i]], '_ph_11.png'))), width = 11, height = 7)
}
```
